/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sumlambda

import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.Serdes
import org.apache.kafka.streams.KafkaStreams
import org.apache.kafka.streams.StreamsBuilder
import org.apache.kafka.streams.StreamsConfig
import java.util.*

fun main() {

    val builder = StreamsBuilder()
    builder.stream<Int, Int>("numbers-topic")
        .filter { key, value -> value % 2 != 0 }
        .selectKey { key, value -> 1 }
        .groupByKey()
        .reduce { value1, value2 -> value1 + value2 }
        .toStream().to("sum-of-odd-numbers-topic")

    val streams = KafkaStreams(builder.build(), Properties().apply {
        put(StreamsConfig.APPLICATION_ID_CONFIG, "sum-lambda-example")
        put(StreamsConfig.CLIENT_ID_CONFIG, "sum-lambda-example-client")
        put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092")
        put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().javaClass.name)
        put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().javaClass.name)
        put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")
        put(StreamsConfig.STATE_DIR_CONFIG, "./tmp")
        put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 10 * 1000)
    })

    // 예제라서 로컬 상태를 시작전에 정리함.
    // 카프카 클러스터에서 모든 상태 관련 데이터를 읽어옴
    // 프로덕션에서는 필요에 따라 해야함
    streams.cleanUp()
    streams.start()

    Runtime.getRuntime().addShutdownHook(Thread(streams::close))
}
