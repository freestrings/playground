/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sessionwindow

import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig
import io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.common.serialization.Serdes
import org.apache.kafka.common.utils.Bytes
import org.apache.kafka.streams.KafkaStreams
import org.apache.kafka.streams.KeyValue
import org.apache.kafka.streams.StreamsBuilder
import org.apache.kafka.streams.StreamsConfig
import org.apache.kafka.streams.kstream.*
import org.apache.kafka.streams.state.SessionStore
import java.time.Duration
import java.util.*

object App {
    val INACTIVITY_GAP = Duration.ofSeconds(3)
}

/**
 * map jo@0 - 1
 * map jo@0 - 2
 * map jo@0 - 1
 * map jo@0 - 1
 */
fun main() {
    val prop = Properties()
    prop[StreamsConfig.APPLICATION_ID_CONFIG] = "session-windows"
    prop[StreamsConfig.CLIENT_ID_CONFIG] = "session-windows-client"
    prop[StreamsConfig.BOOTSTRAP_SERVERS_CONFIG] = "localhost:9092"
    prop[StreamsConfig.STATE_DIR_CONFIG] = "./tmp"
    prop[ConsumerConfig.AUTO_OFFSET_RESET_CONFIG] = "earliest"
    prop[StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG] = 0

    val serdeConfig = mapOf(
        AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG
                to "http://localhost:8081"
    )

    val playEventSerde = SpecificAvroSerde<PlayEvent>()
    playEventSerde.configure(serdeConfig, false)

    val builder = StreamsBuilder()

    builder.stream("play-events", Consumed.with(Serdes.String(), playEventSerde))
        .groupByKey(Grouped.with(Serdes.String(), playEventSerde))
        .windowedBy(SessionWindows.with(App.INACTIVITY_GAP))
        .count(
            Materialized.`as`<String?, Long?, SessionStore<Bytes, ByteArray>?>("play-events-per-session")
                .withKeySerde(Serdes.String())
                .withValueSerde(Serdes.Long())
        )
        .toStream()
        .map { key, value ->
            println("map ${key.key()}@${key.window().end() - key.window().start()} - $value")
            KeyValue("${key.key()}@${key.window().end() - key.window().start()}", value)
        }
        .to("play-events-per-session", Produced.with(Serdes.String(), Serdes.Long()))

    val topology = builder.build()

    val streams = KafkaStreams(topology, prop)

    streams.cleanUp()
    streams.start()
    Runtime.getRuntime().addShutdownHook(Thread(streams::close))
}
