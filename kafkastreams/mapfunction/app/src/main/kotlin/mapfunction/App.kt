/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package mapfunction

import org.apache.kafka.common.serialization.Serdes
import org.apache.kafka.streams.KafkaStreams
import org.apache.kafka.streams.KeyValue
import org.apache.kafka.streams.StreamsBuilder
import org.apache.kafka.streams.StreamsConfig
import org.apache.kafka.streams.kstream.Consumed
import org.apache.kafka.streams.kstream.Produced
import java.util.*


fun main() {
    val prop = Properties()
    prop[StreamsConfig.APPLICATION_ID_CONFIG] = "map-function"
    prop[StreamsConfig.CLIENT_ID_CONFIG] = "map-function-client"
    prop[StreamsConfig.BOOTSTRAP_SERVERS_CONFIG] = "localhost:9092"
    prop[StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG] = Serdes.ByteArray().javaClass.name
    prop[StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG] = Serdes.String().javaClass.name

    val stringSerde = Serdes.String()
    val byteArraySerde = Serdes.Bytes()
    val builder = StreamsBuilder()
    val textLines = builder.stream(
        "TextLinesTopic",
        Consumed.with(byteArraySerde, stringSerde)
    )

    val uppercaseWithMapValue = textLines.mapValues(String::toUpperCase)
    uppercaseWithMapValue.to("UppercasedTextLinesTopic")

    val originalAndUppercased = textLines.map { key, value ->
        KeyValue.pair(value, value.toUpperCase())
    }

    originalAndUppercased.to(
        "OriginalAndUppercasedTopic",
        Produced.with(stringSerde, stringSerde)
    )
    val streams = KafkaStreams(builder.build(), prop)

    streams.cleanUp()
    streams.start()
    Runtime.getRuntime().addShutdownHook(Thread { streams.close() })
}
